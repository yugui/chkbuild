#!/usr/bin/env ruby

require 'build'

Build.limit(:data=>1024*1024*300, :as=>1024*1024*300)

Build.target("ruby",
    ["trunk", [], "", nil],
    ["1.8", [], "", "ruby_1_8"],
    ["trunk-pth", %w{--enable-pthread}, "", nil],
    ["1.8-pth", %w{--enable-pthread}, "", "ruby_1_8"]) {
    |ruby_curr_dir, ruby_version, configure_flags, cflags, ruby_branch|
  Dir.chdir("..") {
    Build.cvs(
      ":pserver:anonymous@cvs.ruby-lang.org:/src", "ruby", ruby_branch,
      :cvsweb => "http://www.ruby-lang.org/cgi-bin/cvsweb.cgi")
    Dir.chdir("ruby") {
      Build.run("autoconf")
    }
  }
  Build.mkcd("ruby")
  Build.run("../../ruby/configure", "--prefix=#{ruby_curr_dir}", "CFLAGS=-Wall -Wno-parentheses -g -O2 -DRUBY_GC_STRESS #{cflags}", *configure_flags) {|log|
    if /^checking target system type\.\.\. (\S+)$/ =~ log
      Build.update_title(:version, "ruby-#{ruby_version} #{$1}")
    end
  }
  Build.add_finish_hook {
    log = Build.all_log
    mark = ''
    mark << "[BUG]" if /\[BUG\]/i =~ log
    mark << "[SEGV]" if /segmentation fault/i =~
      log.sub(/combination may cause frequent hang or segmentation fault/, '') # skip tk message.
    mark << "[FATAL]" if /\[FATAL\]/i =~ log
    Build.update_title(:mark, mark)
  }
  Build.make(:rlimit_data=>1024*1024*200, :rlimit_as=>1024*1024*200)
  Build.run("./ruby", "-v") {|log|
    if /^ruby [0-9.]+ \([0-9\-]+\) \[\S+\]$/ =~ log
      Build.update_title(:version, $&)
    end
  }
  Build.make("install")
  Build.run("./ruby", "../../ruby/sample/test.rb", :reason=>"test.rb")
  Build.run("./ruby", "../../ruby/test/runner.rb", "-v", :reason=>"test-all") {|log|
    if /^\d+ tests, \d+ assertions, (\d+) failures, (\d+) errors$/ =~ log
      failures = $1.to_i
      errors = $2.to_i
      if failures != 0 || errors != 0
        Build.update_title(:status, "#{failures}F#{errors}E")
      end
    end
  }
}
