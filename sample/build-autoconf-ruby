#!/usr/bin/env ruby

require 'build'

def modify_file(filename)
  content = yield File.read(filename)
  open(filename, "w") {|f|
    f.print content
  }
end

Autoconf = Build.target("autoconf") {|dir|
  Dir.chdir("..") {
    Build.gnu_savannah_cvs('autoconf', 'autoconf', nil)
  }
  Build.mkcd("objdir")
  Build.run("../../autoconf/configure", "--prefix=#{dir}")
  # modify Makefile to not use help2man.
  modify_file("Makefile") {|content|
    content.sub(/^SUBDIRS\s*=.*$/) { $&.sub(/ man /, ' ') }
  }
  Build.make
  Build.make("install")
  Build.run("#{dir}/bin/autoconf", '--version') {|log|
    case log
    when /^Autoconf version (.*)$/
      Build.update_title(:version, "autoconf #{$1}")
    when /^autoconf \(GNU Autoconf\) (.*)$/
      Build.update_title(:version, "autoconf #{$1}")
    end
  }
}

Build.target("ruby",
  ["trunk", nil],
  ["1.8", "ruby_1_8"],
  Autoconf) {
    |ruby_curr_dir, ruby_version, ruby_branch, autoconf_dir|
  Dir.chdir("..") {
    Build.cvs(
      ":pserver:anonymous@cvs.ruby-lang.org:/src", "ruby", ruby_branch,
      :cvsweb => "http://www.ruby-lang.org/cgi-bin/cvsweb.cgi")
    Dir.chdir("ruby") {
      Build.run("#{autoconf_dir}/bin/autoconf")
    }
  }
  Build.mkcd("ruby")
  Build.run("../../ruby/configure", "--prefix=#{ruby_curr_dir}", "CFLAGS=-Wall -Wno-parentheses -g -O2") {|log|
    if /^checking target system type\.\.\. (\S+)$/ =~ log
      Build.update_title(:version, "ruby-#{ruby_version} #{$1}")
    end
  }
  Build.add_finish_hook {
    log = Build.all_log
    mark = ''
    mark << "[BUG]" if /\[BUG\]/i =~ log
    mark << "[SEGV]" if /segmentation fault|signal segv/i =~
      log.sub(/combination may cause frequent hang or segmentation fault/, '') # skip tk message.
    mark << "[FATAL]" if /\[FATAL\]/i =~ log
    Build.update_title(:mark, mark)
  }
  Build.make
  Build.run("./ruby", "-v") {|log|
    if /^ruby [0-9.]+ \([0-9\-]+\) \[\S+\]$/ =~ log
      Build.update_title(:version, $&)
    end
  }
  Build.make("install")
  Build.run("./ruby", "../../ruby/sample/test.rb", :reason=>"test.rb") {|log|
    Build.update_title(:status) {|val|
      if !val
        if /^end of test/ !~ log
          if /^test: \d+ failed (\d+)/ =~ log
            "#{$1}NotOK"
          else
            "SomethingFail"
          end
        end
      end
    }
  }
  Build.run("./ruby", "../../ruby/test/runner.rb", "-v", :reason=>"test-all") {|log|
    Build.update_title(:status) {|val|
      if !val
        if /^\d+ tests, \d+ assertions, (\d+) failures, (\d+) errors$/ =~ log
          failures = $1.to_i
          errors = $2.to_i
          if failures != 0 || errors != 0
            "#{failures}F#{errors}E"
          end
        else
          "SomethingFail"
        end
      end
    }
  }
}
