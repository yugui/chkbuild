#!/usr/bin/env ruby

require 'build'

GCC = Build.target("gcc",
  ["trunk", nil],
  ["4.0", "gcc-4_0-branch"]) {|gcc_curr_dir, gcc_version, gcc_branch|
  Dir.chdir("..") {
    Build.cvs("gcc",
      ":ext:anoncvs@savannah.gnu.org:/cvsroot/gcc", "gcc", gcc_branch)
  }
  Build.mkcd("objdir")
  Build.run("../../gcc/configure", "--prefix=#{gcc_curr_dir}", "--enable-languages=c")
  Build.make("bootstrap", "install")
}

Build.target("ruby",
    ["trunk", nil],
    ["1.8", "ruby_1_8"],
    GCC) {
    |ruby_curr_dir, ruby_version, ruby_branch, gcc_dir|
  Dir.chdir("..") {
    Build.cvs("ruby",
      ":pserver:anonymous@cvs.ruby-lang.org:/src", "ruby", ruby_branch)
    Dir.chdir("ruby")
    Build.run("autoconf")
  }
  Build.mkcd("ruby")
  Build.run("../../ruby/configure", "--prefix=#{ruby_curr_dir}", "CFLAGS=-Wall -g -O2", "CC=#{gcc_dir}/bin/gcc") {|log|
    if /^checking target system type\.\.\. (\S+)$/ =~ log
      Build.update_title(:version, "#{ruby_version} #{$1}")
    end
  }
  Build.add_finish_hook {
    log = Build.all_log
    mark = ''
    mark << "[BUG]" if /\[BUG\]/i =~ log
    mark << "[SEGV]" if /Segmentation fault/i =~ log
    mark << "[FATAL]" if /\[FATAL\]/i =~ log
    Build.update_title(:mark, mark)
  }
  Build.make
  Build.run("./ruby", "-v") {|log|
    if /^ruby [0-9.]+ \([0-9\-]+\) \[\S+\]$/ =~ log
      Build.update_title(:version, $&)
    end
  }
  Build.make("install")
  Build.run("./ruby", "../../ruby/sample/test.rb", :reason=>"test.rb")
  Build.run("./ruby", "../../ruby/test/runner.rb", :reason=>"test-all") {|log|
    if /^\d+ tests, \d+ assertions, (\d+) failures, (\d+) errors$/ =~ log
      failures = $1.to_i
      errors = $2.to_i
      if failures != 0 || errors != 0
        Build.update_title(:status, "#{failures}F#{errors}E")
      end
    end
  }
}
